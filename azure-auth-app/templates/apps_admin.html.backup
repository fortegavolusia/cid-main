<!DOCTYPE html>
<html>
<head>
    <title>App Registration Management</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            border-bottom: 2px solid #0066cc;
            padding-bottom: 10px;
        }
        .nav {
            margin-bottom: 20px;
        }
        .nav a {
            margin-right: 15px;
            color: #0066cc;
            text-decoration: none;
        }
        .nav a:hover {
            text-decoration: underline;
        }
        .app-grid {
            display: grid;
            gap: 20px;
            margin-top: 20px;
        }
        .app-card {
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 8px;
            background: #fafafa;
        }
        .app-card h3 {
            margin: 0 0 10px 0;
            color: #333;
        }
        .app-info {
            display: grid;
            gap: 10px;
            margin: 15px 0;
        }
        .info-row {
            display: grid;
            grid-template-columns: 150px 1fr;
            gap: 10px;
        }
        .info-label {
            font-weight: bold;
            color: #666;
        }
        .info-value {
            color: #333;
            word-break: break-all;
        }
        .status-active {
            color: green;
            font-weight: bold;
        }
        .status-inactive {
            color: red;
            font-weight: bold;
        }
        .status-success {
            color: #10b981;
        }
        .status-error, .status-timeout, .status-connection_error {
            color: #ef4444;
        }
        .status-unknown {
            color: #6b7280;
        }
        .app-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        .button {
            background: #0066cc;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
            font-size: 14px;
        }
        .button:hover {
            background: #0052a3;
        }
        .button.danger {
            background: #dc3545;
        }
        .button.danger:hover {
            background: #c82333;
        }
        .button.secondary {
            background: #6c757d;
        }
        .button.secondary:hover {
            background: #5a6268;
        }
        .form-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        .form-group textarea {
            min-height: 60px;
            resize: vertical;
        }
        .redirect-uri {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        .redirect-uri input {
            flex: 1;
            margin-right: 10px;
        }
        .secret-display {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 15px;
            border-radius: 4px;
            margin-top: 15px;
        }
        .secret-display code {
            background: #f8f9fa;
            padding: 2px 5px;
            border-radius: 3px;
            font-family: monospace;
            word-break: break-all;
        }
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 10px;
            border-radius: 4px;
            margin-top: 10px;
        }
        .success {
            background: #d4edda;
            color: #155724;
            padding: 10px;
            border-radius: 4px;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>App Registration Management</h1>
        
        <div class="nav">
            <a href="/">Home</a>
            <a href="/auth/admin/tokens">Token Management</a>
            <a href="/auth/admin/apps">App Management</a>
        </div>

        <div id="error-message" class="error" style="display: none;"></div>
        <div id="success-message" class="success" style="display: none;"></div>

        <h2>Register New App</h2>
        <div class="form-section">
            <form id="register-form">
                <div class="form-group">
                    <label for="app-name">App Name</label>
                    <input type="text" id="app-name" required placeholder="My Application">
                </div>
                <div class="form-group">
                    <label for="app-description">Description</label>
                    <textarea id="app-description" required placeholder="Description of what this app does"></textarea>
                </div>
                <div class="form-group">
                    <label for="owner-email">Owner Email</label>
                    <input type="email" id="owner-email" required placeholder="owner@company.com">
                </div>
                <div class="form-group">
                    <label>Redirect URIs</label>
                    <div id="redirect-uris">
                        <div class="redirect-uri">
                            <input type="url" placeholder="https://myapp.company.com/auth/callback" required>
                            <button type="button" class="button secondary" onclick="removeRedirectUri(this)">Remove</button>
                        </div>
                    </div>
                    <button type="button" class="button secondary" onclick="addRedirectUri()">Add Redirect URI</button>
                </div>
                <div class="form-group">
                    <label for="discovery-endpoint">Discovery Endpoint (Optional)</label>
                    <input type="url" id="discovery-endpoint" placeholder="https://myapp.company.com/discovery/endpoints">
                    <small>URL where your app exposes its API endpoints for discovery</small>
                </div>
                <div class="form-group">
                    <label>
                        <input type="checkbox" id="allow-discovery">
                        Allow Endpoint Discovery
                    </label>
                    <small>Enable CIDS to automatically discover and pull endpoints from your app</small>
                </div>
                <button type="submit" class="button">Register App</button>
            </form>
        </div>

        <div id="secret-display" class="secret-display" style="display: none;">
            <h3>App Registered Successfully!</h3>
            <p><strong>Important:</strong> Save these credentials now. The client secret will not be shown again.</p>
            <p><strong>Client ID:</strong> <code id="client-id-display"></code></p>
            <p><strong>Client Secret:</strong> <code id="client-secret-display"></code></p>
            <button class="button" onclick="copyToClipboard('client-id-display')">Copy Client ID</button>
            <button class="button" onclick="copyToClipboard('client-secret-display')">Copy Client Secret</button>
        </div>

        <h2>Registered Apps</h2>
        <div id="apps-list" class="app-grid">
            <p>Loading...</p>
        </div>
    </div>

    <script>
        let authToken = null;

        // Get auth token from cookie or storage
        async function getAuthToken() {
            // Try to get from current session
            const response = await fetch('/auth/whoami', {
                credentials: 'include'
            });
            
            if (response.ok) {
                const data = await response.json();
                // Store for API calls
                authToken = 'Bearer ' + getCookie('internal_token');
            }
            return authToken;
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        function addRedirectUri() {
            const container = document.getElementById('redirect-uris');
            const div = document.createElement('div');
            div.className = 'redirect-uri';
            div.innerHTML = `
                <input type="url" placeholder="https://myapp.company.com/auth/callback" required>
                <button type="button" class="button secondary" onclick="removeRedirectUri(this)">Remove</button>
            `;
            container.appendChild(div);
        }

        function removeRedirectUri(button) {
            const container = document.getElementById('redirect-uris');
            if (container.children.length > 1) {
                button.parentElement.remove();
            }
        }

        function showError(message) {
            const errorDiv = document.getElementById('error-message');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => errorDiv.style.display = 'none', 5000);
        }

        function showSuccess(message) {
            const successDiv = document.getElementById('success-message');
            successDiv.textContent = message;
            successDiv.style.display = 'block';
            setTimeout(() => successDiv.style.display = 'none', 5000);
        }

        function showInfo(message) {
            // For now, use the success div for info messages
            const successDiv = document.getElementById('success-message');
            successDiv.textContent = message;
            successDiv.style.display = 'block';
            setTimeout(() => successDiv.style.display = 'none', 3000);
        }

        function copyToClipboard(elementId) {
            const text = document.getElementById(elementId).textContent;
            navigator.clipboard.writeText(text).then(() => {
                showSuccess('Copied to clipboard!');
            });
        }

        async function loadApps() {
            try {
                const token = await getAuthToken();
                const response = await fetch('/auth/admin/apps', {
                    headers: {
                        'Authorization': token
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to load apps');
                }

                const apps = await response.json();
                displayApps(apps);
            } catch (error) {
                showError('Failed to load apps: ' + error.message);
            }
        }

        function displayApps(apps) {
            const container = document.getElementById('apps-list');
            
            if (apps.length === 0) {
                container.innerHTML = '<p>No apps registered yet.</p>';
                return;
            }

            container.innerHTML = apps.map(app => `
                <div class="app-card">
                    <h3>${app.name}</h3>
                    <div class="app-info">
                        <div class="info-row">
                            <span class="info-label">Client ID:</span>
                            <span class="info-value">${app.client_id}</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Description:</span>
                            <span class="info-value">${app.description}</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Owner:</span>
                            <span class="info-value">${app.owner_email}</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Status:</span>
                            <span class="info-value ${app.is_active ? 'status-active' : 'status-inactive'}">
                                ${app.is_active ? 'Active' : 'Inactive'}
                            </span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Redirect URIs:</span>
                            <span class="info-value">${app.redirect_uris.join('<br>')}</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Created:</span>
                            <span class="info-value">${new Date(app.created_at).toLocaleString()}</span>
                        </div>
                        ${app.allow_discovery ? `
                            <div class="info-row">
                                <span class="info-label">Discovery:</span>
                                <span class="info-value">
                                    <span style="color: #10b981;">✓ Enabled</span>
                                    ${app.discovery_endpoint ? `<br><small>${app.discovery_endpoint}</small>` : ''}
                                </span>
                            </div>
                            ${app.last_discovery_at ? `
                                <div class="info-row">
                                    <span class="info-label">Last Discovery:</span>
                                    <span class="info-value">
                                        ${new Date(app.last_discovery_at).toLocaleString()}
                                        <span class="status-${app.discovery_status || 'unknown'}">(${app.discovery_status || 'never run'})</span>
                                    </span>
                                </div>
                            ` : ''}
                        ` : ''}
                    </div>
                    <div class="app-actions">
                        <button class="button" onclick="viewRoleMappings('${app.client_id}')">Role Mappings</button>
                        ${app.allow_discovery ? `
                            <button class="button" onclick="viewEndpoints('${app.client_id}')">View Endpoints</button>
                            <button class="button secondary" onclick="triggerDiscovery('${app.client_id}')">Run Discovery</button>
                        ` : ''}
                        <button class="button secondary" onclick="rotateSecret('${app.client_id}')">Rotate Secret</button>
                        <button class="button danger" onclick="deleteApp('${app.client_id}')">Delete</button>
                    </div>
                </div>
            `).join('');
        }

        async function rotateSecret(clientId) {
            if (!confirm('Are you sure you want to rotate the client secret? The old secret will stop working immediately.')) {
                return;
            }

            try {
                const token = await getAuthToken();
                const response = await fetch(`/auth/admin/apps/${clientId}/rotate-secret`, {
                    method: 'POST',
                    headers: {
                        'Authorization': token
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to rotate secret');
                }

                const data = await response.json();
                
                // Show the new secret
                document.getElementById('client-id-display').textContent = data.client_id;
                document.getElementById('client-secret-display').textContent = data.client_secret;
                document.getElementById('secret-display').style.display = 'block';
                
                showSuccess('Client secret rotated successfully!');
            } catch (error) {
                showError('Failed to rotate secret: ' + error.message);
            }
        }

        async function deleteApp(clientId) {
            if (!confirm('Are you sure you want to delete this app? It will be deactivated and cannot be used for authentication.')) {
                return;
            }

            try {
                const token = await getAuthToken();
                const response = await fetch(`/auth/admin/apps/${clientId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': token
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to delete app');
                }

                showSuccess('App deleted successfully!');
                loadApps(); // Reload the list
            } catch (error) {
                showError('Failed to delete app: ' + error.message);
            }
        }

        async function viewRoleMappings(clientId) {
            try {
                const token = await getAuthToken();
                const response = await fetch(`/auth/admin/apps/${clientId}/role-mappings`, {
                    headers: {
                        'Authorization': token
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to load role mappings');
                }

                const data = await response.json();
                
                // For now, just show in an alert. You could create a modal instead.
                if (data.mappings.length === 0) {
                    alert('No role mappings configured for this app.');
                } else {
                    const mappingText = data.mappings.map(m => 
                        `AD Group: ${m.ad_group} → Role: ${m.app_role}`
                    ).join('\n');
                    alert(`Role Mappings for ${data.app_name}:\n\n${mappingText}`);
                }
            } catch (error) {
                showError('Failed to load role mappings: ' + error.message);
            }
        }

        async function viewEndpoints(clientId) {
            try {
                const token = await getAuthToken();
                const response = await fetch(`/apps/${clientId}/endpoints`, {
                    headers: {
                        'Authorization': token
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to load endpoints');
                }
                
                const data = await response.json();
                
                if (!data || !data.endpoints || data.endpoints.length === 0) {
                    alert('No endpoints registered for this app.');
                } else {
                    const endpointText = data.endpoints.map(e => 
                        `${e.method} ${e.path} - ${e.description}${e.discovered ? ' (discovered)' : ''}`
                    ).join('\n');
                    alert(`Endpoints for ${clientId}:\n\n${endpointText}\n\nTotal: ${data.endpoints.length} endpoints`);
                }
            } catch (error) {
                showError('Failed to load endpoints: ' + error.message);
            }
        }

        async function triggerDiscovery(clientId) {
            try {
                const token = await getAuthToken();
                showInfo('Running discovery...');
                
                const response = await fetch(`/discovery/endpoints/${clientId}`, {
                    method: 'POST',
                    headers: {
                        'Authorization': token
                    }
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.detail || 'Discovery failed');
                }
                
                const result = await response.json();
                
                if (result.status === 'success') {
                    showSuccess(`Discovery completed! Found ${result.endpoints_discovered} endpoints, stored ${result.endpoints_stored}.`);
                    loadApps(); // Reload to show updated status
                } else if (result.status === 'skipped') {
                    showInfo(result.message);
                } else {
                    showError(`Discovery failed: ${result.error}`);
                }
            } catch (error) {
                showError('Failed to trigger discovery: ' + error.message);
            }
        }

        // Handle form submission
        document.getElementById('register-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const redirectUriInputs = document.querySelectorAll('#redirect-uris input');
            const redirectUris = Array.from(redirectUriInputs)
                .map(input => input.value.trim())
                .filter(uri => uri.length > 0);

            const data = {
                name: document.getElementById('app-name').value,
                description: document.getElementById('app-description').value,
                owner_email: document.getElementById('owner-email').value,
                redirect_uris: redirectUris,
                discovery_endpoint: document.getElementById('discovery-endpoint').value || null,
                allow_discovery: document.getElementById('allow-discovery').checked
            };

            try {
                const token = await getAuthToken();
                const response = await fetch('/auth/admin/apps', {
                    method: 'POST',
                    headers: {
                        'Authorization': token,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.detail || 'Failed to register app');
                }

                const result = await response.json();
                
                // Show the credentials
                document.getElementById('client-id-display').textContent = result.app.client_id;
                document.getElementById('client-secret-display').textContent = result.client_secret;
                document.getElementById('secret-display').style.display = 'block';
                
                // Clear the form
                document.getElementById('register-form').reset();
                
                // Reload the apps list
                loadApps();
                
                showSuccess('App registered successfully!');
            } catch (error) {
                showError('Failed to register app: ' + error.message);
            }
        });

        // Load apps on page load
        loadApps();
    </script>
</body>
</html>